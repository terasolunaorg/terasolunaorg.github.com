=====================
Continuous Deployment
=====================
これまでの章で、プロジェクト（ソースコードツリー）の構造、バージョン管理、インスペクションとビルド作業、ライフサイクル管理について述べてきた。
これらの工程を恒常的にループさせることによって目的のソフトウェアをリリースし続けることが、継続的デプロイメントである。

開発の途中では、SNAPSHOTバージョンのソフトウェアをパッケージリポジトリや開発用APサーバにリリースし、テストを実施する。
ソフトウェアを正式にリリースする場合には、バージョン番号を固定したうえでVCS上でソースコードツリーに対してタグづけを行う必要がある。
このように、スナップショットリリースの場合と正式リリースの場合で、ビルドとデプロイのフローが少し異なる。

また、Webサービスを提供するAPサーバにアプリケーションをデプロイする場合には、スナップショットバージョンか正式リリースバージョンかに関わらず、
デプロイ先のAPサーバ環境に合わせた環境依存性設定ファイル群と*.warファイルをセットでデプロイする必要がある。

そこで、環境依存性設定を持たない状態のライブラリ(jar,war)をmavenリポジトリに登録する作業と、
それらを実際にAPサーバにデプロイする作業を分離することによって、デプロイ作業を簡潔に実施可能にする。

.. note::

 mavenの世界では、pom.xml上の<version>タグの内容によってそれがSNAPSHOTバージョンなのかRELEASEバージョンなのかが自動的に判別される。

 * 末尾が -SNAPSHOT である場合にSNAPSHOTとみなされる。例：<version>1.0-SNAPSHOT</version>
 * 末尾が -SNAPSHOT ではない場合はRELEASEとみなされる。例：<version>1.0</version>

 また、mavenパッケージリポジトリにはsnapshotsリポジトリとreleaseリポジトリの2種類があり、いくつかの制約があることに注意する。

 * SNAPSHOTバージョンのソフトウェアをreleaseリポジトリに登録することはできない。その逆も不可能。
 * releaseリポジトリには、同一のGAV情報を持つartifactは1回しか登録できない。（GAV=groupId,artifactId,version）
 * snapshotリポジトリには、同一のGAV情報を持つartifactを何度でも登録しなおすことができる。

------------------------------------
delivery of SNAPSHOT version library
------------------------------------
SNAPSHOTバージョンのソフトウェアのデリバリーフローは下図のように簡潔である。

.. figure:: ./images/ContinuousDelivery-snapshot.png
   :alt: Continuous delivery for SNAPSHOT version.
   :width: 600px

1. 開発用trunkからソースコードをチェックアウトする。
2. コンパイル、コードメトリクスの測定、テストを実行する。
 * コンパイルエラー、コードメトリクスでの一定以上のviolationの発生、テストの失敗の場合、以降の作業を中止する。
3. mavenパッケージリポジトリサーバにartifact(jar,warファイル)をアップロード(mvn deploy)する。

Jenkins build job sample
------------------------

.. todo:: 後でキャプチャをはる

-----------------------------------
delivery of RELEASE version library
-----------------------------------
正式なリリースの場合、バージョン番号の付与作業が必要なため、SNAPSHOTリリースよりもやや複雑なフローとなる。

.. figure:: ./images/ContinuousDelivery-release.png
   :alt: Continuous delivery for RELEASE version.
   :width: 600px

1. リリースに与えるバージョン番号を決定する。（例：1.0.1）
2. 開発用trunk（またはリリース用branch)からソースコードをチェックアウトする。
3. pom.xml上の<version>タグを変更する。（例：<version>1.0.1</version>）
4. VCS上にtagを付与する。（例： tags/1.0.1）
5. コンパイル、コードメトリクスの測定、テストを実行する。
 * コンパイルエラー、コードメトリクスでの一定以上のviolationの発生、テストの失敗の場合、以降の作業を中止する。
 * 失敗した場合はVCS上のtagを削除する。
6. mavenパッケージリポジトリサーバにartifact(jar,warファイル)をアップロード(mvn deploy)する。

.. todo:: 
 
 ここで最後にtrunkのソースツリーのpom.xmlのversionタグを、
 次のSNAPSHOTバージョンに書き変えてコミットするところまで書くべきか？！

.. note::

 pom.xmlファイルの<version>タグの変更は `versions-maven-plugin <http://mojo.codehaus.org/versions-maven-plugin/>`_ で可能である。
 
 .. code-block:: bash
 
  mvn versions:set -DnewVersion=1.0.0
 
 上記のようなコマンドで、pom.xml内のversionタグを<version>1.0.0</version>のように編集することができる。

Jenkins build job sample
------------------------
.. todo:: 後でキャプチャをはる

----------------------------------------
delivery of webapp to application server
----------------------------------------
Webサービスを提供するAPサーバにアプリケーションをリリースする場合、
あらかじめmavenパッケージリポジトリに登録済みのwarファイルと、
リリース先のAPサーバ環境に合わせた環境依存性設定ファイル群とを、セットでリリースする。
これはスナップショットリリースか正式リリースかに関わらず同じフローとなる。

.. figure:: ./images/ContinuousDelivery-apserver.png
   :alt: Continuous delivery for webapp to application server.
   :width: 600px

1. リリース対象バージョンのwarファイルをmavenパッケージリポジトリからダウンロードする
2. \*-resourcesプロジェクト（環境依存性設定ファイルを集約しているプロジェクト）をVCSからチェックアウトする
3. mavenのprofileを機能によって、リリース先の環境に合わせた設定ファイル群で内容を差し替えてresourcesプロジェクトをパッケージし、\*-resources-x.y.z.jarを生成する。
4. 生成した\*-resources-x.y.z.jarファイルを、warファイル内のWEB-INF/libフォルダ配下に追加する。
 * Tomcatの場合は、\*-resources-x.y.z.jarをwarファイル内部に追加するのではなく、Tomcatサーバ上の任意のパスにコピーし、そのパスをVirtualWebappLoaderの拡張クラスパスに指定する。詳細は :doc:`EnvironmentIndependency` を参照。
5. warファイルをアプリケーションサーバにデプロイする。

.. note::

 mavenパッケージリポジトリからのwarファイルのダウンロードは、maven-dependency-pluginのgetゴールで可能である。

 .. code-block:: bash

  mvn org.apache.maven.plugins:maven-dependency-plugin:2.5:get \
   -DgroupId=com.example \
   -DartifactId=mywebapp \
   -Dversion=0.0.1-SNAPSHOT \
   -Dpackaging=war \
   -Ddest=${WORKSPACE}/target/mywebapp.war

 これで、targetというディレクトリ配下にmywebapp.warファイルがダウンロードされる。
 
 さらに、下記のようなコマンドで環境依存設定ファイルのパッケージをmywebapp.warファイル内に追加することができる。

 .. code-block:: bash

  mkdir -p $WORKSPACE/target/WEB-INF/lib
  cd $WORKSPACE/target
  cp ./mywebapp-resources*.jar WEB-INF/lib
  jar -ufv mywebapp.war WEB-INF/lib
 
Jenkins build job sample
------------------------
.. todo:: あとでキャプチャをはる
